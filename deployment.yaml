apiVersion: apps/v1
kind: Deployment
metadata:
  name: user-microservice-deployment
spec:
  selector:
    matchLabels:
      app: user-microservice-k8s-mysql
  replicas: 1
  template:
    metadata:
      labels:
        app: user-microservice-k8s-mysql
    spec:
      containers:
        - name: user-microservice
          image: elmachkouriimane/usermicroservice:latest  # Utilisez l'URL compl√®te de votre image Docker Hub
          ports:
            - containerPort: 8080
          env:   # Setting Environmental Variables
            - name: DB_HOST   # Setting Database host address from configMap
              valueFrom:
                configMapKeyRef:
                  name: db-config
                  key: host
            - name: DB_NAME  # Setting Database name from configMap
              valueFrom:
                configMapKeyRef:
                  name: db-config
                  key: dbName
            - name: DB_USERNAME  # Setting Database username from Secret
              valueFrom:
                secretKeyRef:
                  name: mysql-secrets
                  key: username
            - name: DB_PASSWORD # Setting Database password from Secret
              valueFrom:
                secretKeyRef:
                  name: mysql-secrets
                  key: password
            - name: MANAGEMENT_ENDPOINT_HEALTH_PROBES_ENABLED
              value: "true"
            - name: MANAGEMENT_HEALTH_READINESSTATE_ENABLED
              value: "true"
            - name: MANAGEMENT_HEALTH_LIVENESSSTATE_ENABLED
              value: "true"
#            - name: SFG_BREWERY_BEER-SERVICE-HOST
#              value: http://user-service:8080
            - name: SERVER_SHUTDOWN
              value: "graceful"
          lifecycle:
            preStop:
              exec:
               command: ["sh", "-c", "sleep 10"]
---
apiVersion: v1 # Kubernetes API version
kind: Service # Kubernetes resource kind we are creating
metadata: # Metadata of the resource kind we are creating
  labels:
    app: beer-service
  name: user-microservice-svc
spec:
  selector:
    app: user-microservice-k8s-mysql
    type: ClusterIP
  ports:
    - protocol: TCP
      port: 8080 # The port that the service is running on in the cluster
      targetPort: 8080 # The port exposed by the ser
status:
  loadBalancer: {}
